{"version":3,"sources":["components/Computes.jsx","App.jsx","actions/computes.js","actions/types.js","serviceWorker.js","reducers/computes.js","reducers/index.js","store.js","index.js"],"names":["Computes","computes","this","props","actions","0","1","2","3","allComputes","map","c","i","react_default","a","createElement","className","key","arg1","action","arg2","result","style","padding","Component","connect","state","client","WebSocket","App","resultError","pending","handleAction","event","_this","setState","target","selectedIndex","inputValid","test","value","Object","defineProperty","name","requestApi","_callee","_this$state","formData","regenerator_default","wrap","_context","prev","next","preventDefault","JSON","stringify","type","data","send","t0","console","log","stop","_this2","onopen","e","onmessage","message","resData","parse","update","statesToChange","_this$state2","id","onSubmit","disabled","required","onChange","display","components_Computes","dispatch","current_computes","payload","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","$set","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6858db83.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'styles.css';\r\n\r\n\r\nclass Computes extends Component {\r\n    render() {\r\n        const { computes } = this.props\r\n\r\n        const actions = {\r\n            0: '+',\r\n            1: '-',\r\n            2: '*',\r\n            3: '/'\r\n        }\r\n\r\n        const allComputes = computes.map((c, i) =>\r\n            <div className=\"compute_item\" key={i}>{c.arg1 + ' ' + actions[c.action] + ' ' + c.arg2}&nbsp;=&nbsp;<span className={typeof c.result == 'string' ? 'error' : ''}>{c.result}</span></div>\r\n        );\r\n\r\n        return (\r\n            <div style={{ padding: 0 }} className=\"container\">\r\n                <div className=\"all-users-computes\">{allComputes}</div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    computes: state.computes.computes\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Computes)\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateComputes } from 'actions/computes';\nimport 'styles.css';\n\n// COMPONENTS\nimport Computes from 'components/Computes'\n\n\nconst client = new WebSocket('ws://127.0.0.1:3000')\n\nclass App extends Component {\n\n  state = {\n    arg1: \"\",\n    arg2: \"\",\n    action: 0,\n    result: null,\n    resultError: false,\n    pending: false\n  }\n\n  componentWillMount() {\n    client.onopen = (e) => {\n      console.log('connected');\n    };\n\n    client.onmessage = (message) => {\n      const resData = JSON.parse(message.data)\n      //console.log(resData)\n      switch (resData.type) {\n        case 'result': {\n          const { update } = this.props\n          update(resData.data.computes)\n\n          console.log(resData)\n\n          const statesToChange = {\n            computes: resData.data.computes,\n            pending: false\n          }\n\n          // CONDITIONALY ADD RESULT PROPERTY\n          if (resData.data.result) {\n            statesToChange.result = resData.data.result\n          }\n\n          // CONDITIONALY ADD RESULT ERROR PROPERTY\n          if (typeof resData.data.result != 'undefined') {\n            if (resData.data.result === 'Ошибка') {\n              statesToChange.result = resData.data.result\n              statesToChange.resultError = true\n            } else {\n              statesToChange.result = resData.data.result\n              statesToChange.resultError = false\n            }\n          }\n\n          this.setState(statesToChange)\n        } break;\n\n        default:\n          break;\n      }\n    };\n  }\n\n  handleAction = event => {\n    this.setState({\n      action: event.target.selectedIndex\n    })\n  }\n\n  inputValid = event => {\n    // ONLY DIGITS 0-8 length\n    if (/^[0-9]{0,8}$/.test(event.target.value)) {\n      this.setState({ [event.target.name]: event.target.value })\n    } else {\n      event.target.value = this.state[event.target.name]\n    }\n  }\n\n  requestApi = async event => {\n    event.preventDefault()\n\n    // ALL INPUTS\n    const { arg1, arg2, action } = this.state\n\n    if (arg1 && arg2) {\n      const formData = JSON.stringify({\n        type: 'form_data',\n        data: {\n          arg1,\n          arg2,\n          action\n        }\n      })\n\n      try {\n        await client.send(formData)\n        this.setState({\n          pending: true\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n\n  render() {\n    const { pending, resultError, result } = this.state\n\n    return (\n      <div className=\"container\">\n        <h1>Калькулятор</h1>\n        <form id=\"form\" onSubmit={this.requestApi}>\n          <input disabled={pending} required onChange={this.inputValid} type=\"text\" id=\"arg1\" name=\"arg1\" />\n          <select onChange={this.handleAction} disabled={pending} name=\"action\" id=\"action\">\n            <option value=\"1\">+</option>\n            <option value=\"2\">-</option>\n            <option value=\"3\">X</option>\n            <option value=\"4\">/</option>\n          </select>\n          <input disabled={pending} required onChange={this.inputValid} type=\"text\" id=\"arg2\" name=\"arg2\" />\n          <button disabled={pending}>\n            <span style={{ display: pending ? 'none' : 'inline' }}>=</span>\n            <div style={{ display: pending ? 'block' : 'none' }} className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n          </button>\n          <span id=\"result\" className={resultError ? 'error' : ''}>{result}</span>\n        </form>\n        <Computes />\n      </div>\n    )\n  };\n}\n\n\n\nconst mapDispatchToProps = dispatch => ({\n  update: (computes) => dispatch(updateComputes(computes))\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n","import { CURRENT_COMPUTES } from \"actions/types\";\r\n\r\nconst updateComputes = (current_computes) => (dispatch) => {\r\n    dispatch({\r\n        type: CURRENT_COMPUTES,\r\n        payload: current_computes\r\n    })\r\n}\r\n\r\nexport { updateComputes }","export const CURRENT_COMPUTES = 'CURRENT_COMPUTES'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import update from 'immutability-helper';\r\nimport { CURRENT_COMPUTES } from \"actions/types\";\r\n// const initialState = []\r\nconst initialState = {\r\n    computes: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    const { type } = action\r\n    const { payload } = action\r\n\r\n    switch (type) {\r\n        case CURRENT_COMPUTES:\r\n            return update(state, {\r\n                computes: { $set: payload }\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import { combineReducers } from \"redux\";\r\nimport computes from \"./computes\";\r\n\r\nconst rootReducer = combineReducers({ computes })\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from 'reducers';\r\n\r\nconst initialState = {}\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(thunk)\r\n    ))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from 'store';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}